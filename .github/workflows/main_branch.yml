name: Main Branch Workflow

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-java@v1
      with: 
        java-version: 1.8
    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
    - name: Build with Maven
      run: mvn clean package
          
    - uses: actions/upload-artifact@v1
      with:
        name: verademo.war
        path: target/verademo.war

  policy-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: get archive
        uses: actions/download-artifact@v2
        with:
          name: verademo.war
          path: .
      - name: Veracode Upload and Scan Action Step
        uses: veracode/veracode-uploadandscan-action@master
        id: upload_and_scan
        with:
          appname: 'Verademo GitHub Training'
          createprofile: true
          version: '${{ github.run_id }}'
          filepath: 'verademo.war'
          vid: '${{ secrets.VERACODE_API_ID }}'
          vkey: '${{ secrets.VERACODE_API_KEY }}'
          scantimeout: 15
        continue-on-error: true

  get-policy-flaws:
    runs-on: ubuntu-latest
    needs: policy-scan
    container: 
      image: veracode/api-signing:latest
    steps:
      # Note: this will only work up to about 500 flaws
      #		due to Veracode results limiting
      # See the get_flaws.sh script in the helpers directory
      #		for a more elaborate method
      - name: get policy flaws
        run: |
          cd /tmp
          export VERACODE_API_KEY_ID=${{ secrets.VERACODE_API_ID }}
          export VERACODE_API_KEY_SECRET=${{ secrets.VERACODE_API_KEY }}
          guid=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v1/applications?name=Verademo%20GitHub%20Training" | jq -r '._embedded.applications[0].guid') 
          echo GUID: ${guid}
          total_flaws=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=STATIC&violates_policy=True" | jq -r '.page.total_elements')
          echo TOTAL_FLAWS: ${total_flaws}
          http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=STATIC&violates_policy=True&size=${total_flaws}" > policy_flaws.json
      - name: save results file
        uses: actions/upload-artifact@v2
        with:
          name: policy-flaws
          path: /tmp/policy_flaws.json

  import-policy-flaws:
    needs: get-policy-flaws
    runs-on: ubuntu-latest
    steps:
      - name: get flaw file
        uses: actions/download-artifact@v2
        with:
          name: policy-flaws
          path: /tmp

      - name: import flaws as issues
        uses: veracode/veracode-flaws-to-issues@v1
        with:
          scan-results-json: '/tmp/policy_flaws.json'
          github-token: ${{ secrets.GITHUB_TOKEN }}

  veracode-pipeline-scan:
    needs: policy-scan
    runs-on: ubuntu-latest
    container: 
      image: veracode/pipeline-scan:latest
      options: --user root
    steps:
      - name: get archive
        uses: actions/download-artifact@v2
        with:
          name: verademo.war
          path: /tmp
      - name: pipeline-scan
        run: | 
          java -jar /opt/veracode/pipeline-scan.jar \
            -vid "${{secrets.VERACODE_API_ID}}" \
            -vkey "${{secrets.VERACODE_API_KEY}}" \
            --fail_on_severity="Very High, High" \
            --file /tmp/verademo.war \
            -jf results.json \
            -fjf filtered_results.json 
        continue-on-error: true

      - name: save standard results
        uses: actions/upload-artifact@v1
        with:
          name: PipelineScanResults
          path: results.json
      - name: save filtered results
        uses: actions/upload-artifact@v1
        with:
          name: filtered-results
          path: filtered_results.json

  commit-baseline-file:
    needs: veracode-pipeline-scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: get scan results
      uses: actions/download-artifact@v2
      with:
        name: PipelineScanResults
    - name: commit baseline file to feature branches
      run: |
        git config --global user.name "julz0815"
        git config --global user.email "username@users.noreply.github.com"
        git add "results.json"
        git stash
        git pull origin feature-123 || echo "Couldn't find remote branch"
        git checkout stash -- .
        git commit -m "Veracode Baseline File push from pipeline"
        git push origin HEAD:feature-123 --force-with-lease
  veracode-sca-task:
    runs-on: ubuntu-latest
    name: Scan repository for Issues

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run Veracode SCA
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SRCCLR_API_TOKEN }}
        uses: veracode/veracode-sca@v1.09
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          create-issues: true